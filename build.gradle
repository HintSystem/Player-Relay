plugins {
	id "fabric-loom" version "${loom_version}"
	id "maven-publish"
    id "me.modmuss50.mod-publish-plugin" version "1.0.0"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// Load local properties if file exists
def localPropertiesFile = rootProject.file('local.gradle.properties')
if (localPropertiesFile.exists()) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(localPropertiesFile))
    localProperties.each { key, value ->
        project.ext[key as String] = value
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name "Modrinth"
                url "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven { url "https://maven.terraformersmc.com/" } // Mod menu
    maven { url "https://maven.isxander.dev/releases" } // YACL
    maven { url "https://maven.shedaniel.me/" } // Cloth Config

    mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // UPnP library
    implementation "org.bitlet:weupnp:0.1.4"
    include "org.bitlet:weupnp:0.1.4"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"

    modImplementation "maven.modrinth:ping-wheel:${project.pingwheel_version}"

    modImplementation "maven.modrinth:xaeros-minimap:${project.xaerosminimap_version}"
    modImplementation "maven.modrinth:xaeros-world-map:${project.xaerosworldmap_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/player-relay.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {}
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    changelog = file("CHANGELOG.md").text
    modLoaders.add("fabric")
    type = BETA

    modrinth {
        accessToken = project.findProperty("MODRINTH_API_KEY") ?: providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "4vsSeMij"
        minecraftVersions.add("1.21.8")

        requires("fabric-api")
        requires("yacl")
        optional("modmenu")
        optional("xaeros-minimap")
        optional("xaeros-world-map")
        optional("ping-wheel")
    }
}